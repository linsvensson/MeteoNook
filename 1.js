exports.ids=[1],exports.modules={"./js/api_key_middleware.ts":
/*!**********************************!*\
  !*** ./js/api_key_middleware.ts ***!
  \**********************************/
/*! exports provided: apiKeyMiddleware */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apiKeyMiddleware", function() { return apiKeyMiddleware; });\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dotenv */ "./node_modules/dotenv/lib/main.js");\n/* harmony import */ var dotenv__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(dotenv__WEBPACK_IMPORTED_MODULE_0__);\n\ndotenv__WEBPACK_IMPORTED_MODULE_0___default.a.config();\nconst API_KEY = process.env.API_KEY;\nconst apiKeyMiddleware = (req, res, next) => {\n    const apiKey = req.header("x-api-key");\n    if (!apiKey || apiKey !== API_KEY) {\n        return res.status(401).json({ message: "Unauthorized" });\n    }\n    next();\n};\n\n\n//# sourceURL=webpack:///./js/api_key_middleware.ts?')},"./js/app_main.ts":
/*!************************!*\
  !*** ./js/app_main.ts ***!
  \************************/
/*! no exports provided */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(http__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! express */ \"./node_modules/express/index.js\");\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(express__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var morgan__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! morgan */ \"./node_modules/morgan/index.js\");\n/* harmony import */ var morgan__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(morgan__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _routes_routes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./routes/routes */ \"./js/routes/routes.ts\");\n/* harmony import */ var _api_key_middleware__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./api_key_middleware */ \"./js/api_key_middleware.ts\");\nvar _a;\n\n\n\n\n\nconst router = express__WEBPACK_IMPORTED_MODULE_1___default()();\n/** Logging */\nrouter.use(morgan__WEBPACK_IMPORTED_MODULE_2___default()('dev'));\n/** Parse the request */\nrouter.use(express__WEBPACK_IMPORTED_MODULE_1___default.a.urlencoded({ extended: false }));\n/** Takes care of JSON data */\nrouter.use(express__WEBPACK_IMPORTED_MODULE_1___default.a.json());\n/** RULES OF OUR API */\nrouter.use((req, res, next) => {\n    // set the CORS policy\n    res.header('Access-Control-Allow-Origin', '*');\n    // set the CORS headers\n    res.header('Access-Control-Allow-Headers', 'origin, X-Requested-With,Content-Type,Accept, Authorization, x-api-key');\n    // set the CORS method headers\n    if (req.method === 'OPTIONS') {\n        res.header('Access-Control-Allow-Methods', 'GET POST');\n        return res.status(200).json({});\n    }\n    next();\n});\n/** Routes */\nrouter.use(_api_key_middleware__WEBPACK_IMPORTED_MODULE_4__[\"apiKeyMiddleware\"]);\nrouter.use('/', _routes_routes__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n/** Error handling */\nrouter.use((req, res, next) => {\n    const error = new Error('not found');\n    return res.status(404).json({\n        message: error.message\n    });\n});\n/** Server */\nconst httpServer = http__WEBPACK_IMPORTED_MODULE_0___default.a.createServer(router);\nconst PORT = (_a = process.env.PORT) !== null && _a !== void 0 ? _a : 8080;\nhttpServer.listen(PORT, () => console.log(`The server is running on port ${PORT}`));\n\n\n//# sourceURL=webpack:///./js/app_main.ts?")},"./js/controllers/weather.ts":
/*!***********************************!*\
  !*** ./js/controllers/weather.ts ***!
  \***********************************/
/*! exports provided: getUpcomingDays */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getUpcomingDays", function() { return getUpcomingDays; });\n/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model */ "./js/model.ts");\n\nconst getUpcomingDays = async (req, res, next) => {\n    let seed = parseInt(req.query.seed);\n    let hemisphere = parseInt(req.query.hemisphere);\n    let todayDateStr = req.query.date;\n    let todayDate;\n    if (todayDateStr != undefined) {\n        todayDate = new Date(todayDateStr);\n    }\n    if (todayDate === undefined) {\n        const error = new Error(\'wrong format on date\');\n        return res.status(400).json({\n            message: error.message\n        });\n    }\n    if (seed === undefined || hemisphere === undefined || todayDateStr === undefined) {\n        const error = new Error(\'missing parameters\');\n        return res.status(400).json({\n            message: error.message\n        });\n    }\n    const days = [];\n    const date = todayDate;\n    for (let i = 0; i < 35; i++) {\n        days.push(new _model__WEBPACK_IMPORTED_MODULE_0__["DayForecast"](hemisphere, seed, date.getFullYear(), date.getMonth() + 1, date.getDate()));\n        date.setTime(date.getTime() + 86400000);\n    }\n    return res.status(200).json({\n        data: JSON.stringify(days)\n    });\n};\n\n\n//# sourceURL=webpack:///./js/controllers/weather.ts?')},"./js/model.ts":
/*!*********************!*\
  !*** ./js/model.ts ***!
  \*********************/
/*! exports provided: DayType, ShowerType, Hemisphere, SpecialDay, Weather, getMonthLength, AmbiguousWeather, createDayInfo, isDayNonEmpty, dayUsesTypes, firstPattern, maxPattern, isSpecialCloudEntryAllowed, rainbowPatternsByTime, getPossiblePatternsForDay, PopulateErrorKind, populateGuessData, IslandInfo, Forecast, MonthForecast, DayForecast */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DayType", function() { return DayType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShowerType", function() { return ShowerType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AmbiguousWeather", function() { return AmbiguousWeather; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createDayInfo", function() { return createDayInfo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDayNonEmpty", function() { return isDayNonEmpty; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dayUsesTypes", function() { return dayUsesTypes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "firstPattern", function() { return firstPattern; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "maxPattern", function() { return maxPattern; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSpecialCloudEntryAllowed", function() { return isSpecialCloudEntryAllowed; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rainbowPatternsByTime", function() { return rainbowPatternsByTime; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPossiblePatternsForDay", function() { return getPossiblePatternsForDay; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PopulateErrorKind", function() { return PopulateErrorKind; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "populateGuessData", function() { return populateGuessData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IslandInfo", function() { return IslandInfo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Forecast", function() { return Forecast; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MonthForecast", function() { return MonthForecast; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DayForecast", function() { return DayForecast; });\n/* harmony import */ var _pkg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pkg */ "./pkg/index.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Hemisphere", function() { return _pkg__WEBPACK_IMPORTED_MODULE_0__["Hemisphere"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpecialDay", function() { return _pkg__WEBPACK_IMPORTED_MODULE_0__["SpecialDay"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Weather", function() { return _pkg__WEBPACK_IMPORTED_MODULE_0__["Weather"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getMonthLength", function() { return _pkg__WEBPACK_IMPORTED_MODULE_0__["getMonthLength"]; });\n\nvar DayType;\n(function (DayType) {\n    DayType[DayType["NoData"] = 0] = "NoData";\n    DayType[DayType["None"] = 1] = "None";\n    DayType[DayType["Shower"] = 2] = "Shower";\n    DayType[DayType["Rainbow"] = 3] = "Rainbow";\n    DayType[DayType["Aurora"] = 4] = "Aurora";\n})(DayType || (DayType = {}));\nvar ShowerType;\n(function (ShowerType) {\n    ShowerType[ShowerType["NotSure"] = 0] = "NotSure";\n    ShowerType[ShowerType["Light"] = 1] = "Light";\n    ShowerType[ShowerType["Heavy"] = 2] = "Heavy";\n})(ShowerType || (ShowerType = {}));\n\n\nvar AmbiguousWeather;\n(function (AmbiguousWeather) {\n    AmbiguousWeather[AmbiguousWeather["ClearOrSunny"] = 95] = "ClearOrSunny";\n    AmbiguousWeather[AmbiguousWeather["SunnyOrCloudy"] = 96] = "SunnyOrCloudy";\n    AmbiguousWeather[AmbiguousWeather["CloudyOrRainClouds"] = 97] = "CloudyOrRainClouds";\n    AmbiguousWeather[AmbiguousWeather["NoRain"] = 98] = "NoRain";\n    AmbiguousWeather[AmbiguousWeather["RainOrHeavyRain"] = 99] = "RainOrHeavyRain";\n})(AmbiguousWeather || (AmbiguousWeather = {}));\nfunction createDayInfo(date) {\n    return {\n        y: date.getFullYear(), m: date.getMonth() + 1, d: date.getDate(),\n        dayType: DayType.NoData, showerType: ShowerType.NotSure,\n        rainbowTime: 10, rainbowDouble: false,\n        auroraFine01: false, auroraFine03: false, auroraFine05: false,\n        types: [], stars: [], gaps: []\n    };\n}\nfunction isDayNonEmpty(day) {\n    return (day.dayType != DayType.NoData || day.types.length > 0);\n}\nfunction dayUsesTypes(day) {\n    const dt = day.dayType;\n    if (dt == DayType.NoData)\n        return true;\n    if (dt == DayType.None)\n        return true;\n    if (dt == DayType.Shower && day.showerType != ShowerType.Heavy)\n        return true;\n    return false;\n}\nconst firstPattern = _pkg__WEBPACK_IMPORTED_MODULE_0__["Pattern"].Fine00;\nconst maxPattern = _pkg__WEBPACK_IMPORTED_MODULE_0__["Pattern"].EventDay00;\nfunction checkTypeMatch(realType, expected) {\n    switch (expected) {\n        case AmbiguousWeather.ClearOrSunny:\n            return realType == _pkg__WEBPACK_IMPORTED_MODULE_0__["Weather"].Clear || realType == _pkg__WEBPACK_IMPORTED_MODULE_0__["Weather"].Sunny;\n        case AmbiguousWeather.SunnyOrCloudy:\n            return realType == _pkg__WEBPACK_IMPORTED_MODULE_0__["Weather"].Sunny || realType == _pkg__WEBPACK_IMPORTED_MODULE_0__["Weather"].Cloudy;\n        case AmbiguousWeather.CloudyOrRainClouds:\n            return realType == _pkg__WEBPACK_IMPORTED_MODULE_0__["Weather"].Cloudy || realType == _pkg__WEBPACK_IMPORTED_MODULE_0__["Weather"].RainClouds;\n        case AmbiguousWeather.RainOrHeavyRain:\n            return realType == _pkg__WEBPACK_IMPORTED_MODULE_0__["Weather"].Rain || realType == _pkg__WEBPACK_IMPORTED_MODULE_0__["Weather"].HeavyRain;\n        case AmbiguousWeather.NoRain:\n            return !(realType == _pkg__WEBPACK_IMPORTED_MODULE_0__["Weather"].Rain || realType == _pkg__WEBPACK_IMPORTED_MODULE_0__["Weather"].HeavyRain);\n        default:\n            return realType == expected;\n    }\n}\nfunction getOldWeather(hour, pat) {\n    if (pat == _pkg__WEBPACK_IMPORTED_MODULE_0__["Pattern"].Fine02) {\n        // Pre-v1.3.0\n        if (hour == 18)\n            return _pkg__WEBPACK_IMPORTED_MODULE_0__["Weather"].Sunny;\n        if (hour == 19)\n            return _pkg__WEBPACK_IMPORTED_MODULE_0__["Weather"].Cloudy;\n    }\n    else if (pat == _pkg__WEBPACK_IMPORTED_MODULE_0__["Pattern"].Fine06) {\n        // Pre-v1.3.0\n        if (hour == 17)\n            return _pkg__WEBPACK_IMPORTED_MODULE_0__["Weather"].Sunny;\n        if (hour == 19)\n            return _pkg__WEBPACK_IMPORTED_MODULE_0__["Weather"].Cloudy;\n    }\n    return undefined;\n}\nconst cumulonimbusPatterns = [\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].Fine,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].FineCloud,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].CloudFine,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].FineRain,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].EventDay\n];\nconst cirrusPatterns = [\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].Fine,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].Cloud,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].FineCloud,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].FineRain,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].CloudFine,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].CloudRain,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].RainCloud,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].EventDay\n];\nfunction isSpecialCloudEntryAllowed(claimedWeather, cloudLevel, hour) {\n    if (claimedWeather != _pkg__WEBPACK_IMPORTED_MODULE_0__["Weather"].Clear && claimedWeather != _pkg__WEBPACK_IMPORTED_MODULE_0__["Weather"].Sunny && claimedWeather != AmbiguousWeather.ClearOrSunny)\n        return false;\n    switch (cloudLevel) {\n        case _pkg__WEBPACK_IMPORTED_MODULE_0__["CloudLevel"].Cumulonimbus: return (hour >= 9) && (hour <= 20);\n        case _pkg__WEBPACK_IMPORTED_MODULE_0__["CloudLevel"].Cirrus: return (hour >= 6) || (hour <= 3);\n        case _pkg__WEBPACK_IMPORTED_MODULE_0__["CloudLevel"].Billow: return (hour >= 6) && (hour <= 16);\n        case _pkg__WEBPACK_IMPORTED_MODULE_0__["CloudLevel"].Thin: return (hour >= 6) || (hour <= 3);\n    }\n    return false;\n}\nfunction checkPatternAgainstTypes(pat, cloudLevel, types) {\n    for (const typeInfo of types) {\n        const hour = typeInfo.time;\n        const claimedWeather = typeInfo.type;\n        const realWeather = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getWeather"])(hour, pat);\n        if (checkTypeMatch(realWeather, claimedWeather) == false) {\n            // allow for discrepancies\n            const oldWeather = getOldWeather(hour, pat);\n            if (oldWeather === undefined || checkTypeMatch(oldWeather, claimedWeather) == false)\n                return false;\n        }\n        if (typeInfo.specialCloud === true && isSpecialCloudEntryAllowed(claimedWeather, cloudLevel, hour)) {\n            switch (cloudLevel) {\n                case _pkg__WEBPACK_IMPORTED_MODULE_0__["CloudLevel"].Cumulonimbus:\n                    if (!cumulonimbusPatterns.includes(Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getPatternKind"])(pat)))\n                        return false;\n                    break;\n                case _pkg__WEBPACK_IMPORTED_MODULE_0__["CloudLevel"].Cirrus:\n                    if (!cirrusPatterns.includes(Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getPatternKind"])(pat)))\n                        return false;\n                    break;\n            }\n        }\n    }\n    return true;\n}\nconst rainbowPatternsByTime = {\n    10: _pkg__WEBPACK_IMPORTED_MODULE_0__["Pattern"].CloudFine00,\n    12: _pkg__WEBPACK_IMPORTED_MODULE_0__["Pattern"].CloudFine02,\n    13: _pkg__WEBPACK_IMPORTED_MODULE_0__["Pattern"].CloudFine01,\n    14: _pkg__WEBPACK_IMPORTED_MODULE_0__["Pattern"].FineRain00,\n    15: _pkg__WEBPACK_IMPORTED_MODULE_0__["Pattern"].FineRain01,\n    16: _pkg__WEBPACK_IMPORTED_MODULE_0__["Pattern"].FineRain03\n};\nfunction getPossiblePatternsForDay(hemisphere, day) {\n    const results = [];\n    const cloudLevel = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getCloudLevel"])(hemisphere, day.m, day.d);\n    for (let pat = 0; pat <= maxPattern; pat++) {\n        const isHeavy = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["isHeavyShowerPattern"])(pat);\n        if (day.dayType == DayType.Shower) {\n            // showers restrict patterns according to the specified shower type\n            const isLight = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["isLightShowerPattern"])(pat);\n            if (isLight && day.showerType == ShowerType.Heavy)\n                continue;\n            if (isHeavy && day.showerType == ShowerType.Light)\n                continue;\n            if (!isLight && !isHeavy)\n                continue;\n        }\n        else if (day.dayType == DayType.Rainbow) {\n            // rainbows have one pattern determined by the rainbow time\n            if (pat != rainbowPatternsByTime[day.rainbowTime])\n                continue;\n        }\n        else if (day.dayType == DayType.Aurora) {\n            // aurorae have three patterns, no easy way to distinguish\n            // so we leave it to the user\n            if (pat == _pkg__WEBPACK_IMPORTED_MODULE_0__["Pattern"].Fine01) {\n                if (!day.auroraFine01)\n                    continue;\n            }\n            else if (pat == _pkg__WEBPACK_IMPORTED_MODULE_0__["Pattern"].Fine03) {\n                if (!day.auroraFine03)\n                    continue;\n            }\n            else if (pat == _pkg__WEBPACK_IMPORTED_MODULE_0__["Pattern"].Fine05) {\n                if (!day.auroraFine05)\n                    continue;\n            }\n            else {\n                continue;\n            }\n        }\n        else if (day.dayType == DayType.None) {\n            // exclude heavy showers if \'None of the above\' is selected\n            // since they\'re pretty hard to miss\n            if (isHeavy)\n                continue;\n        }\n        if (!Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["isPatternPossibleAtDate"])(hemisphere, day.m, day.d, pat))\n            continue;\n        if (dayUsesTypes(day) && !checkPatternAgainstTypes(pat, cloudLevel, day.types))\n            continue;\n        results.push(pat);\n    }\n    return results;\n}\nvar PopulateErrorKind;\n(function (PopulateErrorKind) {\n    PopulateErrorKind[PopulateErrorKind["NoPatterns"] = 0] = "NoPatterns";\n    PopulateErrorKind[PopulateErrorKind["StarConflict"] = 1] = "StarConflict";\n    PopulateErrorKind[PopulateErrorKind["SpecialCloudGap"] = 2] = "SpecialCloudGap";\n    PopulateErrorKind[PopulateErrorKind["SpecialCloudTooLong"] = 3] = "SpecialCloudTooLong";\n})(PopulateErrorKind || (PopulateErrorKind = {}));\nfunction populateGuessData(hemisphere, data, day) {\n    const patterns = getPossiblePatternsForDay(hemisphere, day);\n    if (patterns.length == 0)\n        return { kind: PopulateErrorKind.NoPatterns };\n    for (const pattern of patterns) {\n        data.addPattern(day.y, day.m, day.d, pattern);\n    }\n    const cloudLevel = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getCloudLevel"])(hemisphere, day.m, day.d);\n    let cloudTrueMask = 0, cloudFalseMask = 0;\n    let cloudMinHour = 999, cloudMaxHour = 0;\n    for (const type of day.types) {\n        if (type.specialCloud !== null && isSpecialCloudEntryAllowed(type.type, cloudLevel, type.time)) {\n            if (type.specialCloud) {\n                cloudTrueMask |= (1 << type.time);\n                const adjustedHour = (type.time < 5) ? (24 + type.time) : type.time;\n                if (adjustedHour < cloudMinHour)\n                    cloudMinHour = adjustedHour;\n                if (adjustedHour > cloudMaxHour)\n                    cloudMaxHour = adjustedHour;\n            }\n            else {\n                cloudFalseMask |= (1 << type.time);\n            }\n        }\n    }\n    data.addSpecialCloudInfo(day.y, day.m, day.d, cloudTrueMask, cloudFalseMask);\n    if (cloudTrueMask !== 0 && cloudLevel !== _pkg__WEBPACK_IMPORTED_MODULE_0__["CloudLevel"].Cumulonimbus) {\n        // cirrus, billow and thin clouds must show up in a contiguous group\n        for (let hour = cloudMinHour; hour < cloudMaxHour; hour++) {\n            if ((cloudFalseMask & (1 << (hour % 24))) !== 0)\n                return { kind: PopulateErrorKind.SpecialCloudGap };\n        }\n        const hourCount = (cloudMaxHour - cloudMinHour) + 1;\n        if (hourCount > 8)\n            return { kind: PopulateErrorKind.SpecialCloudTooLong, hourCount };\n    }\n    if (day.dayType == DayType.Rainbow)\n        data.addRainbow(day.y, day.m, day.d, day.rainbowDouble);\n    if (day.dayType == DayType.Shower) {\n        for (const star of day.stars) {\n            data.addMinute(day.y, day.m, day.d, star.hour, star.minute, true);\n            for (const second of star.seconds) {\n                if (second != 99)\n                    data.addSecond(day.y, day.m, day.d, star.hour, star.minute, second);\n            }\n        }\n        for (const gap of day.gaps) {\n            const endLH = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["toLinearHour"])(gap.endHour);\n            const endMinute = gap.endMinute;\n            for (let lh = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["toLinearHour"])(gap.startHour), minute = gap.startMinute; lh < endLH || (lh == endLH && minute <= endMinute);) {\n                const hour = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["fromLinearHour"])(lh);\n                if (!data.addMinute(day.y, day.m, day.d, hour, minute, false)) {\n                    return { kind: PopulateErrorKind.StarConflict, hour, minute };\n                }\n                minute++;\n                if (minute == 60) {\n                    minute = 0;\n                    lh++;\n                }\n            }\n        }\n    }\n    return undefined;\n}\nclass IslandInfo {\n    constructor(other) {\n        if (other === undefined) {\n            this.hemisphere = _pkg__WEBPACK_IMPORTED_MODULE_0__["Hemisphere"].Northern;\n            this.name = \'Anyisle\';\n            this.seed = 1856402561;\n            this.offsetMinutes = 0;\n        }\n        else if (typeof other == \'string\') {\n            // parse query string\n            const bits = other.split(\'&\');\n            this.name = decodeURIComponent(bits[1]);\n            this.seed = parseInt(decodeURIComponent(bits[2]), 10);\n            this.hemisphere = (decodeURIComponent(bits[3]).toUpperCase() == \'S\') ? _pkg__WEBPACK_IMPORTED_MODULE_0__["Hemisphere"].Southern : _pkg__WEBPACK_IMPORTED_MODULE_0__["Hemisphere"].Northern;\n            this.offsetMinutes = (bits[4] === undefined) ? 0 : parseInt(decodeURIComponent(bits[4]), 10);\n        }\n        else {\n            // copy of existing IslandInfo\n            // this is a potential fix for corrupted data causing issue #33\n            this.hemisphere = (typeof other.hemisphere == \'number\') ? other.hemisphere : _pkg__WEBPACK_IMPORTED_MODULE_0__["Hemisphere"].Northern;\n            this.name = (typeof other.name == \'string\') ? other.name : \'Anyisle\';\n            this.seed = (typeof other.seed == \'number\') ? other.seed : 1856402561;\n            this.offsetMinutes = (typeof other.offsetMinutes == \'number\') ? other.offsetMinutes : 0;\n        }\n    }\n    get queryString() {\n        const bits = [\'?v1\'];\n        bits.push(encodeURIComponent(this.name));\n        bits.push(encodeURIComponent(this.seed.toString()));\n        bits.push(encodeURIComponent((this.hemisphere == _pkg__WEBPACK_IMPORTED_MODULE_0__["Hemisphere"].Southern) ? \'S\' : \'N\'));\n        if (this.offsetMinutes !== 0) {\n            bits[0] = \'?v2\';\n            bits.push(encodeURIComponent(this.offsetMinutes.toString()));\n        }\n        return bits.join(\'&\');\n    }\n    static canLoadFromQueryString(str) {\n        const bits = str.split(\'&\');\n        if (bits.length === 4 && bits[0] === \'?v1\')\n            return true;\n        if (bits.length === 5 && bits[0] === \'?v2\')\n            return true;\n        return false;\n    }\n}\nclass Forecast {\n    get hemisphere() { return this.island.hemisphere; }\n    get islandName() { return this.island.name; }\n    get seed() { return this.island.seed; }\n    constructor(island) {\n        this.island = new IslandInfo(island);\n        const now = new Date();\n        now.setTime(now.getTime() - this.island.offsetMinutes * 60000);\n        this.year = now.getFullYear();\n        this.month = now.getMonth() + 1;\n        this.monthForecasts = [];\n        this.regenerateForecasts();\n    }\n    setPreviousYear() {\n        this.year -= 1;\n        this.regenerateForecasts();\n    }\n    setNextYear() {\n        this.year += 1;\n        this.regenerateForecasts();\n    }\n    setPreviousMonth() {\n        this.month -= 1;\n        if (this.month <= 0) {\n            this.month = 12;\n            this.year -= 1;\n            this.regenerateForecasts();\n        }\n    }\n    setNextMonth() {\n        this.month += 1;\n        if (this.month >= 13) {\n            this.month = 1;\n            this.year += 1;\n            this.regenerateForecasts();\n        }\n    }\n    regenerateForecasts() {\n        this.monthForecasts.splice(0, this.monthForecasts.length);\n        for (let month = 1; month <= 12; month++) {\n            const fc = new MonthForecast(this.hemisphere, this.seed, this.year, month);\n            this.monthForecasts.push(Object.freeze(fc));\n        }\n    }\n    get currentMonth() {\n        return this.monthForecasts[this.month - 1];\n    }\n    get hemiSuffix() {\n        if (this.hemisphere == _pkg__WEBPACK_IMPORTED_MODULE_0__["Hemisphere"].Northern)\n            return \'N\';\n        else\n            return \'S\';\n    }\n    get todayDate() {\n        // adjust back by 5 hours so the returned date\n        // corresponds with the in-game 5am-5am days\n        const now = new Date();\n        now.setTime(now.getTime() + this.island.offsetMinutes * 60000 - 5 * 3600000);\n        return now;\n    }\n}\nclass MonthForecast {\n    constructor(hemisphere, seed, year, month) {\n        this.hemisphere = hemisphere;\n        this.seed = seed;\n        this.year = year;\n        this.month = month;\n        this.startDate = new Date(year, month - 1, 1);\n        const dayCount = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getMonthLength"])(year, month);\n        this.days = [];\n        this.auroraCount = 0;\n        this.rainbowCount = 0;\n        this.singleRainbowCount = 0;\n        this.doubleRainbowCount = 0;\n        this.lightShowerCount = 0;\n        this.heavyShowerCount = 0;\n        for (let day = 1; day <= dayCount; day++) {\n            const fc = new DayForecast(hemisphere, seed, year, month, day);\n            this.days.push(fc);\n            if (fc.aurora)\n                this.auroraCount += 1;\n            if (fc.rainbowCount > 0)\n                this.rainbowCount += 1;\n            if (fc.rainbowCount == 1)\n                this.singleRainbowCount += 1;\n            if (fc.rainbowCount == 2)\n                this.doubleRainbowCount += 1;\n            if (fc.lightShower)\n                this.lightShowerCount += 1;\n            if (fc.heavyShower)\n                this.heavyShowerCount += 1;\n        }\n    }\n}\nconst preNormalFogPatterns = [\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].Fine,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].FineCloud,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].CloudFine,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].FineRain,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].EventDay\n];\nconst preWaterFogPatterns = [\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].Fine,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].FineCloud,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].CloudFine,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].FineRain\n];\nconst fogPatterns = [\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].Cloud,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].Rain,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].FineCloud,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].CloudFine,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].CloudRain,\n    _pkg__WEBPACK_IMPORTED_MODULE_0__["PatternKind"].RainCloud // I think?\n];\nclass DayForecast {\n    get patternName() {\n        return _pkg__WEBPACK_IMPORTED_MODULE_0__["Pattern"][this.pattern];\n    }\n    hasAuroraAtHour(hour) {\n        if (this.aurora && this.weather[hour] == _pkg__WEBPACK_IMPORTED_MODULE_0__["Weather"].Clear) {\n            return (hour <= 3) || (hour >= 18);\n        }\n        return false;\n    }\n    hasStarsAtHour(hour) {\n        return Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["canHaveShootingStars"])(hour, this.pattern);\n    }\n    get weekday() {\n        return this.date.getDay();\n    }\n    constructor(hemisphere, seed, year, month, day, forcedPattern) {\n        this.hemisphere = hemisphere;\n        this.seed = seed;\n        this.year = year;\n        this.month = month;\n        this.day = day;\n        this.forcedPattern = forcedPattern;\n        this.date = new Date(year, month - 1, day);\n        this.patternPreviewMode = (seed === null);\n        let prevDay = day - 1, prevMonth = month, prevYear = year;\n        let nextDay = day + 1, nextMonth = month, nextYear = year;\n        if (prevDay == 0) {\n            prevMonth -= 1;\n            if (prevMonth == 0) {\n                prevMonth = 12;\n                prevYear -= 1;\n            }\n            prevDay = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getMonthLength"])(prevYear, prevMonth);\n        }\n        let monthLength = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getMonthLength"])(nextYear, nextMonth);\n        if (nextDay > monthLength) {\n            nextDay = 1;\n            nextMonth += 1;\n            if (nextMonth == 13) {\n                nextMonth = 1;\n                nextYear += 1;\n            }\n        }\n        // collect data from the library\n        this.pattern = (forcedPattern === undefined) ? Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getPattern"])(hemisphere, seed, year, month, day) : forcedPattern;\n        this.constellation = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getConstellation"])(month, day);\n        this.specialDay = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["isSpecialDay"])(hemisphere, year, month, day);\n        this.snowLevel = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getSnowLevel"])(hemisphere, month, day);\n        this.spWeatherLevel = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getSpWeatherLevel"])(hemisphere, month, day);\n        this.cloudLevel = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getCloudLevel"])(hemisphere, month, day);\n        this.fogLevel = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getFogLevel"])(hemisphere, month, day);\n        this.aurora = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["isAuroraPattern"])(hemisphere, month, day, this.pattern);\n        this.lightShower = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["isLightShowerPattern"])(this.pattern);\n        this.heavyShower = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["isHeavyShowerPattern"])(this.pattern);\n        const rainbow = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getRainbowInfo"])(hemisphere, seed || 0, year, month, day, this.pattern);\n        this.rainbowCount = Math.min(rainbow >>> 8, (seed == null) ? 1 : 2);\n        this.rainbowHour = rainbow & 0xFF;\n        this.weather = [];\n        this.windPower = [];\n        this.windPowerMin = [];\n        this.windPowerMax = [];\n        this.specialClouds = [];\n        for (let hour = 0; hour < 24; hour++) {\n            this.weather.push(Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getWeather"])(hour, this.pattern));\n            this.windPowerMin.push(Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getWindPowerMin"])(hour, this.pattern));\n            this.windPowerMax.push(Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getWindPowerMax"])(hour, this.pattern));\n            if (seed !== null)\n                this.windPower.push(Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getWindPower"])(seed, year, month, day, hour, this.pattern));\n            this.specialClouds.push(_pkg__WEBPACK_IMPORTED_MODULE_0__["SpecialCloud"].None);\n        }\n        this.heavyFog = false;\n        this.waterFog = false;\n        this.shootingStars = [];\n        if (seed !== null) {\n            const prevPattern = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getPattern"])(hemisphere, seed, prevYear, prevMonth, prevDay);\n            const prevKind = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getPatternKind"])(prevPattern);\n            const thisKind = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getPatternKind"])(this.pattern);\n            if (preNormalFogPatterns.includes(prevKind) && fogPatterns.includes(thisKind)) {\n                this.heavyFog =\n                    (this.windPower[5] < 3) && (this.windPower[6] < 3) &&\n                        (this.windPower[7] < 3) && (this.windPower[8] < 3) &&\n                        this.fogLevel == _pkg__WEBPACK_IMPORTED_MODULE_0__["FogLevel"].HeavyAndWater;\n            }\n            if (preWaterFogPatterns.includes(prevKind) && fogPatterns.includes(thisKind)) {\n                this.waterFog =\n                    (this.fogLevel != _pkg__WEBPACK_IMPORTED_MODULE_0__["FogLevel"].None) &&\n                        Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["checkWaterFog"])(seed, year, month, day);\n            }\n            const nextPattern = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getPattern"])(hemisphere, seed, nextYear, nextMonth, nextDay);\n            const specialCloudInfo = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getSpecialCloudInfo"])(hemisphere, seed || 0, year, month, day, this.pattern, nextPattern);\n            if (specialCloudInfo !== 0xFFFFFFFF) {\n                const cloud = (specialCloudInfo >>> 16);\n                const rangeStart = (specialCloudInfo >>> 8) & 0xFF;\n                const rangeEnd = specialCloudInfo & 0xFF;\n                const allowMultipleBlocks = (cloud == _pkg__WEBPACK_IMPORTED_MODULE_0__["SpecialCloud"].Cumulonimbus);\n                let seenFirstBlock = false;\n                for (let hour = rangeStart; hour <= rangeEnd; hour++) {\n                    const weather = this.weather[hour % 24];\n                    if (weather == _pkg__WEBPACK_IMPORTED_MODULE_0__["Weather"].Clear || weather == _pkg__WEBPACK_IMPORTED_MODULE_0__["Weather"].Sunny) {\n                        seenFirstBlock = true;\n                        this.specialClouds[hour % 24] = cloud;\n                    }\n                    else {\n                        if (seenFirstBlock && !allowMultipleBlocks)\n                            break;\n                    }\n                }\n            }\n            for (let linearHour = 0; linearHour < 9; linearHour++) {\n                const hour = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["fromLinearHour"])(linearHour);\n                if (Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["canHaveShootingStars"])(hour, this.pattern)) {\n                    for (let minute = 0; minute < 60; minute++) {\n                        const starCount = Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["queryStars"])(seed, year, month, day, hour, minute, this.pattern);\n                        if (starCount > 0) {\n                            const star = { hour, minute, seconds: [] };\n                            for (let i = 0; i < starCount; i++) {\n                                star.seconds.push(Object(_pkg__WEBPACK_IMPORTED_MODULE_0__["getStarSecond"])(i));\n                            }\n                            this.shootingStars.push(star);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    toJSON() {\n        return {\n            date: [this.year, this.month, this.day],\n            weekday: this.weekday,\n            pattern: _pkg__WEBPACK_IMPORTED_MODULE_0__["Pattern"][this.pattern],\n            weather: this.weather.map(w => _pkg__WEBPACK_IMPORTED_MODULE_0__["Weather"][w]),\n            windPower: this.windPower,\n            windPowerMin: this.windPowerMin,\n            windPowerMax: this.windPowerMax,\n            specialClouds: this.specialClouds.map(c => _pkg__WEBPACK_IMPORTED_MODULE_0__["SpecialCloud"][c]),\n            constellation: _pkg__WEBPACK_IMPORTED_MODULE_0__["Constellation"][this.constellation],\n            specialDay: _pkg__WEBPACK_IMPORTED_MODULE_0__["SpecialDay"][this.specialDay],\n            snowLevel: _pkg__WEBPACK_IMPORTED_MODULE_0__["SnowLevel"][this.snowLevel],\n            heavyFog: this.heavyFog,\n            waterFog: this.waterFog,\n            rainbowCount: this.rainbowCount,\n            rainbowHour: this.rainbowHour,\n            aurora: this.aurora,\n            lightShower: this.lightShower,\n            heavyShower: this.heavyShower,\n            shootingStars: this.shootingStars\n        };\n    }\n}\n\n\n//# sourceURL=webpack:///./js/model.ts?')},"./js/routes/routes.ts":
/*!*****************************!*\
  !*** ./js/routes/routes.ts ***!
  \*****************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! express */ "./node_modules/express/index.js");\n/* harmony import */ var express__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(express__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _controllers_weather__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../controllers/weather */ "./js/controllers/weather.ts");\n\n\nconst router = express__WEBPACK_IMPORTED_MODULE_0___default.a.Router();\nrouter.get(\'/upcoming-days\', _controllers_weather__WEBPACK_IMPORTED_MODULE_1__["getUpcomingDays"]);\nrouter.get(\'/\', (req, res) => res.status(200).send(\'Hey there!\'));\n/* harmony default export */ __webpack_exports__["default"] = (router);\n\n\n//# sourceURL=webpack:///./js/routes/routes.ts?')},"./node_modules/express/lib sync recursive":
/*!***************************************!*\
  !*** ./node_modules/express/lib sync ***!
  \***************************************/
/*! no static exports found */function(module,exports){eval('function webpackEmptyContext(req) {\n\tvar e = new Error("Cannot find module \'" + req + "\'");\n\te.code = \'MODULE_NOT_FOUND\';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = "./node_modules/express/lib sync recursive";\n\n//# sourceURL=webpack:///./node_modules/express/lib_sync?')},"./pkg/index.js":
/*!**********************!*\
  !*** ./pkg/index.js ***!
  \**********************/
/*! exports provided: __wbg_set_wasm, getPatternKind, isSpecialDay, fromLinearHour, toLinearHour, getMonthLength, getConstellation, getSnowLevel, getCloudLevel, getSpWeatherLevel, getFogLevel, checkWaterFog, getRainbowInfo, isAuroraPattern, getPattern, isPatternPossibleAtDate, getWeather, isHeavyShowerPattern, isLightShowerPattern, getSpecialCloudInfo, getWindPower, getWindPowerMin, getWindPowerMax, canHaveShootingStars, queryStars, getStarSecond, Hemisphere, Weather, WindType, SpecialDay, SnowLevel, CloudLevel, SpWeatherLevel, FogLevel, Constellation, Pattern, PatternKind, SpecialCloud, GuesserResult, GuessData, Guesser, RainbowInfo, Random, SpecialCloudInfo, __wbindgen_throw */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _index_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index_bg.wasm */ "./pkg/index_bg.wasm");\n/* harmony import */ var _index_bg_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index_bg.js */ "./pkg/index_bg.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "__wbg_set_wasm", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["__wbg_set_wasm"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getPatternKind", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["getPatternKind"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isSpecialDay", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["isSpecialDay"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fromLinearHour", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["fromLinearHour"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "toLinearHour", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["toLinearHour"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getMonthLength", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["getMonthLength"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getConstellation", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["getConstellation"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getSnowLevel", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["getSnowLevel"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getCloudLevel", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["getCloudLevel"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getSpWeatherLevel", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["getSpWeatherLevel"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getFogLevel", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["getFogLevel"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "checkWaterFog", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["checkWaterFog"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getRainbowInfo", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["getRainbowInfo"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isAuroraPattern", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["isAuroraPattern"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getPattern", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["getPattern"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isPatternPossibleAtDate", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["isPatternPossibleAtDate"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getWeather", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["getWeather"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isHeavyShowerPattern", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["isHeavyShowerPattern"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isLightShowerPattern", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["isLightShowerPattern"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getSpecialCloudInfo", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["getSpecialCloudInfo"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getWindPower", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["getWindPower"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getWindPowerMin", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["getWindPowerMin"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getWindPowerMax", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["getWindPowerMax"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "canHaveShootingStars", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["canHaveShootingStars"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "queryStars", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["queryStars"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getStarSecond", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["getStarSecond"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Hemisphere", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["Hemisphere"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Weather", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["Weather"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WindType", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["WindType"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpecialDay", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["SpecialDay"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SnowLevel", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["SnowLevel"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CloudLevel", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["CloudLevel"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpWeatherLevel", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["SpWeatherLevel"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FogLevel", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["FogLevel"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Constellation", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["Constellation"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Pattern", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["Pattern"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PatternKind", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["PatternKind"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpecialCloud", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["SpecialCloud"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GuesserResult", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["GuesserResult"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GuessData", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["GuessData"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Guesser", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["Guesser"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RainbowInfo", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["RainbowInfo"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Random", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["Random"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpecialCloudInfo", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["SpecialCloudInfo"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "__wbindgen_throw", function() { return _index_bg_js__WEBPACK_IMPORTED_MODULE_1__["__wbindgen_throw"]; });\n\n\n\nObject(_index_bg_js__WEBPACK_IMPORTED_MODULE_1__["__wbg_set_wasm"])(_index_bg_wasm__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\n//# sourceURL=webpack:///./pkg/index.js?')},"./pkg/index_bg.js":
/*!*************************!*\
  !*** ./pkg/index_bg.js ***!
  \*************************/
/*! exports provided: __wbg_set_wasm, getPatternKind, isSpecialDay, fromLinearHour, toLinearHour, getMonthLength, getConstellation, getSnowLevel, getCloudLevel, getSpWeatherLevel, getFogLevel, checkWaterFog, getRainbowInfo, isAuroraPattern, getPattern, isPatternPossibleAtDate, getWeather, isHeavyShowerPattern, isLightShowerPattern, getSpecialCloudInfo, getWindPower, getWindPowerMin, getWindPowerMax, canHaveShootingStars, queryStars, getStarSecond, Hemisphere, Weather, WindType, SpecialDay, SnowLevel, CloudLevel, SpWeatherLevel, FogLevel, Constellation, Pattern, PatternKind, SpecialCloud, GuesserResult, GuessData, Guesser, RainbowInfo, Random, SpecialCloudInfo, __wbindgen_throw */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__wbg_set_wasm", function() { return __wbg_set_wasm; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPatternKind", function() { return getPatternKind; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSpecialDay", function() { return isSpecialDay; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromLinearHour", function() { return fromLinearHour; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toLinearHour", function() { return toLinearHour; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMonthLength", function() { return getMonthLength; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getConstellation", function() { return getConstellation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSnowLevel", function() { return getSnowLevel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCloudLevel", function() { return getCloudLevel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSpWeatherLevel", function() { return getSpWeatherLevel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFogLevel", function() { return getFogLevel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "checkWaterFog", function() { return checkWaterFog; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRainbowInfo", function() { return getRainbowInfo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isAuroraPattern", function() { return isAuroraPattern; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPattern", function() { return getPattern; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPatternPossibleAtDate", function() { return isPatternPossibleAtDate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getWeather", function() { return getWeather; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isHeavyShowerPattern", function() { return isHeavyShowerPattern; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isLightShowerPattern", function() { return isLightShowerPattern; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSpecialCloudInfo", function() { return getSpecialCloudInfo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getWindPower", function() { return getWindPower; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getWindPowerMin", function() { return getWindPowerMin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getWindPowerMax", function() { return getWindPowerMax; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "canHaveShootingStars", function() { return canHaveShootingStars; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "queryStars", function() { return queryStars; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getStarSecond", function() { return getStarSecond; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Hemisphere", function() { return Hemisphere; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Weather", function() { return Weather; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WindType", function() { return WindType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpecialDay", function() { return SpecialDay; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SnowLevel", function() { return SnowLevel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CloudLevel", function() { return CloudLevel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpWeatherLevel", function() { return SpWeatherLevel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FogLevel", function() { return FogLevel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Constellation", function() { return Constellation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pattern", function() { return Pattern; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PatternKind", function() { return PatternKind; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpecialCloud", function() { return SpecialCloud; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GuesserResult", function() { return GuesserResult; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GuessData", function() { return GuessData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Guesser", function() { return Guesser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RainbowInfo", function() { return RainbowInfo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Random", function() { return Random; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpecialCloudInfo", function() { return SpecialCloudInfo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__wbindgen_throw", function() { return __wbindgen_throw; });\nlet wasm;\nfunction __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nconst lTextDecoder = typeof TextDecoder === \'undefined\' ? (0, module.require)(\'util\').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder(\'utf-8\', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction _assertNum(n) {\n    if (typeof(n) !== \'number\') throw new Error(\'expected a number argument\');\n}\n/**\n* @param {number} pat\n* @returns {number}\n*/\nfunction getPatternKind(pat) {\n    _assertNum(pat);\n    const ret = wasm.getPatternKind(pat);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} hemi\n* @param {number} y\n* @param {number} m\n* @param {number} d\n* @returns {number}\n*/\nfunction isSpecialDay(hemi, y, m, d) {\n    _assertNum(hemi);\n    _assertNum(y);\n    _assertNum(m);\n    _assertNum(d);\n    const ret = wasm.isSpecialDay(hemi, y, m, d);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} linear_hour\n* @returns {number}\n*/\nfunction fromLinearHour(linear_hour) {\n    _assertNum(linear_hour);\n    const ret = wasm.fromLinearHour(linear_hour);\n    return ret;\n}\n\n/**\n* @param {number} hour\n* @returns {number}\n*/\nfunction toLinearHour(hour) {\n    _assertNum(hour);\n    const ret = wasm.toLinearHour(hour);\n    return ret;\n}\n\n/**\n* @param {number} year\n* @param {number} month\n* @returns {number}\n*/\nfunction getMonthLength(year, month) {\n    _assertNum(year);\n    _assertNum(month);\n    const ret = wasm.getMonthLength(year, month);\n    return ret;\n}\n\n/**\n* @param {number} month\n* @param {number} day\n* @returns {number}\n*/\nfunction getConstellation(month, day) {\n    _assertNum(month);\n    _assertNum(day);\n    const ret = wasm.getConstellation(month, day);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} hemi\n* @param {number} month\n* @param {number} day\n* @returns {number}\n*/\nfunction getSnowLevel(hemi, month, day) {\n    _assertNum(hemi);\n    _assertNum(month);\n    _assertNum(day);\n    const ret = wasm.getSnowLevel(hemi, month, day);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} hemi\n* @param {number} month\n* @param {number} day\n* @returns {number}\n*/\nfunction getCloudLevel(hemi, month, day) {\n    _assertNum(hemi);\n    _assertNum(month);\n    _assertNum(day);\n    const ret = wasm.getCloudLevel(hemi, month, day);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} hemi\n* @param {number} month\n* @param {number} day\n* @returns {number}\n*/\nfunction getSpWeatherLevel(hemi, month, day) {\n    _assertNum(hemi);\n    _assertNum(month);\n    _assertNum(day);\n    const ret = wasm.getSpWeatherLevel(hemi, month, day);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} hemi\n* @param {number} month\n* @param {number} day\n* @returns {number}\n*/\nfunction getFogLevel(hemi, month, day) {\n    _assertNum(hemi);\n    _assertNum(month);\n    _assertNum(day);\n    const ret = wasm.getFogLevel(hemi, month, day);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} seed\n* @param {number} year\n* @param {number} month\n* @param {number} day\n* @returns {boolean}\n*/\nfunction checkWaterFog(seed, year, month, day) {\n    _assertNum(seed);\n    _assertNum(year);\n    _assertNum(month);\n    _assertNum(day);\n    const ret = wasm.checkWaterFog(seed, year, month, day);\n    return ret !== 0;\n}\n\n/**\n* @param {number} hemi\n* @param {number} seed\n* @param {number} year\n* @param {number} month\n* @param {number} day\n* @param {number} pattern\n* @returns {number}\n*/\nfunction getRainbowInfo(hemi, seed, year, month, day, pattern) {\n    _assertNum(hemi);\n    _assertNum(seed);\n    _assertNum(year);\n    _assertNum(month);\n    _assertNum(day);\n    _assertNum(pattern);\n    const ret = wasm.getRainbowInfo(hemi, seed, year, month, day, pattern);\n    return ret;\n}\n\n/**\n* @param {number} hemi\n* @param {number} month\n* @param {number} day\n* @param {number} pattern\n* @returns {boolean}\n*/\nfunction isAuroraPattern(hemi, month, day, pattern) {\n    _assertNum(hemi);\n    _assertNum(month);\n    _assertNum(day);\n    _assertNum(pattern);\n    const ret = wasm.isAuroraPattern(hemi, month, day, pattern);\n    return ret !== 0;\n}\n\n/**\n* @param {number} hemi\n* @param {number} seed\n* @param {number} year\n* @param {number} month\n* @param {number} day\n* @returns {number}\n*/\nfunction getPattern(hemi, seed, year, month, day) {\n    _assertNum(hemi);\n    _assertNum(seed);\n    _assertNum(year);\n    _assertNum(month);\n    _assertNum(day);\n    const ret = wasm.getPattern(hemi, seed, year, month, day);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} hemi\n* @param {number} month\n* @param {number} day\n* @param {number} pattern\n* @returns {boolean}\n*/\nfunction isPatternPossibleAtDate(hemi, month, day, pattern) {\n    _assertNum(hemi);\n    _assertNum(month);\n    _assertNum(day);\n    _assertNum(pattern);\n    const ret = wasm.isPatternPossibleAtDate(hemi, month, day, pattern);\n    return ret !== 0;\n}\n\n/**\n* @param {number} hour\n* @param {number} pattern\n* @returns {number}\n*/\nfunction getWeather(hour, pattern) {\n    _assertNum(hour);\n    _assertNum(pattern);\n    const ret = wasm.getWeather(hour, pattern);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} pattern\n* @returns {boolean}\n*/\nfunction isHeavyShowerPattern(pattern) {\n    _assertNum(pattern);\n    const ret = wasm.isHeavyShowerPattern(pattern);\n    return ret !== 0;\n}\n\n/**\n* @param {number} pattern\n* @returns {boolean}\n*/\nfunction isLightShowerPattern(pattern) {\n    _assertNum(pattern);\n    const ret = wasm.isLightShowerPattern(pattern);\n    return ret !== 0;\n}\n\n/**\n* @param {number} hemi\n* @param {number} seed\n* @param {number} year\n* @param {number} month\n* @param {number} day\n* @param {number} today\n* @param {number} tomorrow\n* @returns {number}\n*/\nfunction getSpecialCloudInfo(hemi, seed, year, month, day, today, tomorrow) {\n    _assertNum(hemi);\n    _assertNum(seed);\n    _assertNum(year);\n    _assertNum(month);\n    _assertNum(day);\n    _assertNum(today);\n    _assertNum(tomorrow);\n    const ret = wasm.getSpecialCloudInfo(hemi, seed, year, month, day, today, tomorrow);\n    return ret >>> 0;\n}\n\n/**\n* @param {number} seed\n* @param {number} year\n* @param {number} month\n* @param {number} day\n* @param {number} hour\n* @param {number} pattern\n* @returns {number}\n*/\nfunction getWindPower(seed, year, month, day, hour, pattern) {\n    _assertNum(seed);\n    _assertNum(year);\n    _assertNum(month);\n    _assertNum(day);\n    _assertNum(hour);\n    _assertNum(pattern);\n    const ret = wasm.getWindPower(seed, year, month, day, hour, pattern);\n    return ret;\n}\n\n/**\n* @param {number} hour\n* @param {number} pattern\n* @returns {number}\n*/\nfunction getWindPowerMin(hour, pattern) {\n    _assertNum(hour);\n    _assertNum(pattern);\n    const ret = wasm.getWindPowerMin(hour, pattern);\n    return ret;\n}\n\n/**\n* @param {number} hour\n* @param {number} pattern\n* @returns {number}\n*/\nfunction getWindPowerMax(hour, pattern) {\n    _assertNum(hour);\n    _assertNum(pattern);\n    const ret = wasm.getWindPowerMax(hour, pattern);\n    return ret;\n}\n\n/**\n* @param {number} hour\n* @param {number} pattern\n* @returns {boolean}\n*/\nfunction canHaveShootingStars(hour, pattern) {\n    _assertNum(hour);\n    _assertNum(pattern);\n    const ret = wasm.canHaveShootingStars(hour, pattern);\n    return ret !== 0;\n}\n\n/**\n* @param {number} seed\n* @param {number} year\n* @param {number} month\n* @param {number} day\n* @param {number} hour\n* @param {number} minute\n* @param {number} pattern\n* @returns {number}\n*/\nfunction queryStars(seed, year, month, day, hour, minute, pattern) {\n    _assertNum(seed);\n    _assertNum(year);\n    _assertNum(month);\n    _assertNum(day);\n    _assertNum(hour);\n    _assertNum(minute);\n    _assertNum(pattern);\n    const ret = wasm.queryStars(seed, year, month, day, hour, minute, pattern);\n    return ret;\n}\n\n/**\n* @param {number} index\n* @returns {number}\n*/\nfunction getStarSecond(index) {\n    _assertNum(index);\n    const ret = wasm.getStarSecond(index);\n    return ret;\n}\n\nfunction _assertBoolean(n) {\n    if (typeof(n) !== \'boolean\') {\n        throw new Error(\'expected a boolean argument\');\n    }\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n/**\n*/\nconst Hemisphere = Object.freeze({ Northern:0,"0":"Northern",Southern:1,"1":"Southern", });\n/**\n*/\nconst Weather = Object.freeze({ Clear:0,"0":"Clear",Sunny:1,"1":"Sunny",Cloudy:2,"2":"Cloudy",RainClouds:3,"3":"RainClouds",Rain:4,"4":"Rain",HeavyRain:5,"5":"HeavyRain", });\n/**\n*/\nconst WindType = Object.freeze({ Calm:0,"0":"Calm",Land0:1,"1":"Land0",Land1:2,"2":"Land1",Land2:3,"3":"Land2",Sea0:4,"4":"Sea0",Sea1:5,"5":"Sea1",Sea2:6,"6":"Sea2", });\n/**\n*/\nconst SpecialDay = Object.freeze({ None:0,"0":"None",Easter:1,"1":"Easter",FishCon:2,"2":"FishCon",InsectCon:3,"3":"InsectCon",Countdown:4,"4":"Countdown",Fireworks:5,"5":"Fireworks", });\n/**\n*/\nconst SnowLevel = Object.freeze({ None:0,"0":"None",Low:1,"1":"Low",Full:2,"2":"Full", });\n/**\n*/\nconst CloudLevel = Object.freeze({ None:0,"0":"None",Cumulonimbus:1,"1":"Cumulonimbus",Cirrus:2,"2":"Cirrus",Thin:3,"3":"Thin",Billow:4,"4":"Billow", });\n/**\n*/\nconst SpWeatherLevel = Object.freeze({ None:0,"0":"None",Rainbow:1,"1":"Rainbow",Aurora:2,"2":"Aurora", });\n/**\n*/\nconst FogLevel = Object.freeze({ None:0,"0":"None",HeavyAndWater:1,"1":"HeavyAndWater",WaterOnly:2,"2":"WaterOnly", });\n/**\n*/\nconst Constellation = Object.freeze({ Capricorn:0,"0":"Capricorn",Aquarius:1,"1":"Aquarius",Pisces:2,"2":"Pisces",Aries:3,"3":"Aries",Taurus:4,"4":"Taurus",Gemini:5,"5":"Gemini",Cancer:6,"6":"Cancer",Leo:7,"7":"Leo",Virgo:8,"8":"Virgo",Libra:9,"9":"Libra",Scorpio:10,"10":"Scorpio",Sagittarius:11,"11":"Sagittarius", });\n/**\n*/\nconst Pattern = Object.freeze({ Fine00:0,"0":"Fine00",Fine01:1,"1":"Fine01",Fine02:2,"2":"Fine02",Fine03:3,"3":"Fine03",Fine04:4,"4":"Fine04",Fine05:5,"5":"Fine05",Fine06:6,"6":"Fine06",Cloud00:7,"7":"Cloud00",Cloud01:8,"8":"Cloud01",Cloud02:9,"9":"Cloud02",Rain00:10,"10":"Rain00",Rain01:11,"11":"Rain01",Rain02:12,"12":"Rain02",Rain03:13,"13":"Rain03",Rain04:14,"14":"Rain04",Rain05:15,"15":"Rain05",FineCloud00:16,"16":"FineCloud00",FineCloud01:17,"17":"FineCloud01",FineCloud02:18,"18":"FineCloud02",CloudFine00:19,"19":"CloudFine00",CloudFine01:20,"20":"CloudFine01",CloudFine02:21,"21":"CloudFine02",FineRain00:22,"22":"FineRain00",FineRain01:23,"23":"FineRain01",FineRain02:24,"24":"FineRain02",FineRain03:25,"25":"FineRain03",CloudRain00:26,"26":"CloudRain00",CloudRain01:27,"27":"CloudRain01",CloudRain02:28,"28":"CloudRain02",RainCloud00:29,"29":"RainCloud00",RainCloud01:30,"30":"RainCloud01",RainCloud02:31,"31":"RainCloud02",Commun00:32,"32":"Commun00",EventDay00:33,"33":"EventDay00", });\n/**\n*/\nconst PatternKind = Object.freeze({ Fine:0,"0":"Fine",Cloud:1,"1":"Cloud",Rain:2,"2":"Rain",FineCloud:3,"3":"FineCloud",CloudFine:4,"4":"CloudFine",FineRain:5,"5":"FineRain",CloudRain:6,"6":"CloudRain",RainCloud:7,"7":"RainCloud",Commun:8,"8":"Commun",EventDay:9,"9":"EventDay", });\n/**\n*/\nconst SpecialCloud = Object.freeze({ None:0,"0":"None",Cumulonimbus:1,"1":"Cumulonimbus",Cirrus:2,"2":"Cirrus",Cirrocumulus:3,"3":"Cirrocumulus",ThinClouds:4,"4":"ThinClouds",BillowClouds:5,"5":"BillowClouds", });\n/**\n*/\nconst GuesserResult = Object.freeze({ Incomplete:0,"0":"Incomplete",Complete:1,"1":"Complete",Failed:2,"2":"Failed", });\n/**\n*/\nclass GuessData {\n\n    constructor() {\n        throw new Error(\'cannot invoke `new` directly\');\n    }\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GuessData.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_guessdata_free(ptr);\n    }\n    /**\n    * @param {number} hemisphere\n    * @returns {GuessData}\n    */\n    static new(hemisphere) {\n        _assertNum(hemisphere);\n        const ret = wasm.guessdata_new(hemisphere);\n        return GuessData.__wrap(ret);\n    }\n    /**\n    * @param {number} year\n    * @param {number} month\n    * @param {number} day\n    * @param {number} pat\n    * @returns {boolean}\n    */\n    addPattern(year, month, day, pat) {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        _assertNum(year);\n        _assertNum(month);\n        _assertNum(day);\n        _assertNum(pat);\n        const ret = wasm.guessdata_addPattern(this.__wbg_ptr, year, month, day, pat);\n        return ret !== 0;\n    }\n    /**\n    * @param {number} year\n    * @param {number} month\n    * @param {number} day\n    * @param {number} true_mask\n    * @param {number} false_mask\n    * @returns {boolean}\n    */\n    addSpecialCloudInfo(year, month, day, true_mask, false_mask) {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        _assertNum(year);\n        _assertNum(month);\n        _assertNum(day);\n        _assertNum(true_mask);\n        _assertNum(false_mask);\n        const ret = wasm.guessdata_addSpecialCloudInfo(this.__wbg_ptr, year, month, day, true_mask, false_mask);\n        return ret !== 0;\n    }\n    /**\n    * @param {number} year\n    * @param {number} month\n    * @param {number} day\n    * @param {number} hour\n    * @param {number} minute\n    * @param {boolean} yes\n    * @returns {boolean}\n    */\n    addMinute(year, month, day, hour, minute, yes) {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        _assertNum(year);\n        _assertNum(month);\n        _assertNum(day);\n        _assertNum(hour);\n        _assertNum(minute);\n        _assertBoolean(yes);\n        const ret = wasm.guessdata_addMinute(this.__wbg_ptr, year, month, day, hour, minute, yes);\n        return ret !== 0;\n    }\n    /**\n    * @param {number} year\n    * @param {number} month\n    * @param {number} day\n    * @param {number} hour\n    * @param {number} minute\n    * @param {number} second\n    * @returns {boolean}\n    */\n    addSecond(year, month, day, hour, minute, second) {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        _assertNum(year);\n        _assertNum(month);\n        _assertNum(day);\n        _assertNum(hour);\n        _assertNum(minute);\n        _assertNum(second);\n        const ret = wasm.guessdata_addSecond(this.__wbg_ptr, year, month, day, hour, minute, second);\n        return ret !== 0;\n    }\n    /**\n    * @param {number} year\n    * @param {number} month\n    * @param {number} day\n    * @param {boolean} is_double\n    * @returns {boolean}\n    */\n    addRainbow(year, month, day, is_double) {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        _assertNum(year);\n        _assertNum(month);\n        _assertNum(day);\n        _assertBoolean(is_double);\n        const ret = wasm.guessdata_addRainbow(this.__wbg_ptr, year, month, day, is_double);\n        return ret !== 0;\n    }\n    /**\n    * @param {number} seed\n    * @returns {boolean}\n    */\n    check(seed) {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        _assertNum(seed);\n        const ret = wasm.guessdata_check(this.__wbg_ptr, seed);\n        return ret !== 0;\n    }\n}\n/**\n*/\nclass Guesser {\n\n    constructor() {\n        throw new Error(\'cannot invoke `new` directly\');\n    }\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Guesser.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_guesser_free(ptr);\n    }\n    /**\n    * @param {number} minimum\n    * @param {number} maximum\n    * @returns {Guesser}\n    */\n    static new(minimum, maximum) {\n        _assertNum(minimum);\n        _assertNum(maximum);\n        const ret = wasm.guesser_new(minimum, maximum);\n        return Guesser.__wrap(ret);\n    }\n    /**\n    * @param {GuessData} data\n    * @param {number} step_size\n    * @returns {number}\n    */\n    work(data, step_size) {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        _assertClass(data, GuessData);\n        if (data.__wbg_ptr === 0) {\n            throw new Error(\'Attempt to use a moved value\');\n        }\n        _assertNum(step_size);\n        const ret = wasm.guesser_work(this.__wbg_ptr, data.__wbg_ptr, step_size);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    getPercentage() {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        const ret = wasm.guesser_getPercentage(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    getResultCount() {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        const ret = wasm.guesser_getResultCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {number}\n    */\n    getResult(index) {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        _assertNum(index);\n        const ret = wasm.guesser_getResult(this.__wbg_ptr, index);\n        return ret >>> 0;\n    }\n}\n/**\n*/\nclass RainbowInfo {\n\n    constructor() {\n        throw new Error(\'cannot invoke `new` directly\');\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rainbowinfo_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get count() {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        const ret = wasm.__wbg_get_rainbowinfo_count(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set count(arg0) {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        _assertNum(arg0);\n        wasm.__wbg_set_rainbowinfo_count(this.__wbg_ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get hour() {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        const ret = wasm.__wbg_get_rainbowinfo_hour(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set hour(arg0) {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        _assertNum(arg0);\n        wasm.__wbg_set_rainbowinfo_hour(this.__wbg_ptr, arg0);\n    }\n}\n/**\n*/\nclass Random {\n\n    constructor() {\n        throw new Error(\'cannot invoke `new` directly\');\n    }\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Random.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_random_free(ptr);\n    }\n    /**\n    * @param {number} a\n    * @param {number} b\n    * @param {number} c\n    * @param {number} d\n    * @returns {Random}\n    */\n    static withState(a, b, c, d) {\n        _assertNum(a);\n        _assertNum(b);\n        _assertNum(c);\n        _assertNum(d);\n        const ret = wasm.random_withState(a, b, c, d);\n        return Random.__wrap(ret);\n    }\n    /**\n    * @param {number} seed\n    * @returns {Random}\n    */\n    static withSeed(seed) {\n        _assertNum(seed);\n        const ret = wasm.random_withSeed(seed);\n        return Random.__wrap(ret);\n    }\n    /**\n    * @param {number} seed\n    */\n    init(seed) {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        _assertNum(seed);\n        wasm.random_init(this.__wbg_ptr, seed);\n    }\n    /**\n    * @returns {number}\n    */\n    roll() {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        const ret = wasm.random_roll(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} limit\n    * @returns {number}\n    */\n    rollMax(limit) {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        _assertNum(limit);\n        const ret = wasm.random_rollMax(this.__wbg_ptr, limit);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} limit\n    * @returns {number}\n    */\n    roll_max8(limit) {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        _assertNum(limit);\n        const ret = wasm.random_roll_max8(this.__wbg_ptr, limit);\n        return ret;\n    }\n}\n/**\n*/\nclass SpecialCloudInfo {\n\n    constructor() {\n        throw new Error(\'cannot invoke `new` directly\');\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_specialcloudinfo_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get cloud() {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        const ret = wasm.__wbg_get_specialcloudinfo_cloud(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set cloud(arg0) {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        _assertNum(arg0);\n        wasm.__wbg_set_specialcloudinfo_cloud(this.__wbg_ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get range_start() {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        const ret = wasm.__wbg_get_specialcloudinfo_range_start(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set range_start(arg0) {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        _assertNum(arg0);\n        wasm.__wbg_set_specialcloudinfo_range_start(this.__wbg_ptr, arg0);\n    }\n    /**\n    * @returns {number}\n    */\n    get range_end() {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        const ret = wasm.__wbg_get_specialcloudinfo_range_end(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set range_end(arg0) {\n        if (this.__wbg_ptr == 0) throw new Error(\'Attempt to use a moved value\');\n        _assertNum(this.__wbg_ptr);\n        _assertNum(arg0);\n        wasm.__wbg_set_specialcloudinfo_range_end(this.__wbg_ptr, arg0);\n    }\n}\n\nfunction __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))\n\n//# sourceURL=webpack:///./pkg/index_bg.js?')},"./pkg/index_bg.wasm":
/*!***************************!*\
  !*** ./pkg/index_bg.wasm ***!
  \***************************/
/*! exports provided: memory, getPatternKind, isSpecialDay, __wbg_random_free, random_withState, random_withSeed, random_init, random_roll, random_rollMax, random_roll_max8, fromLinearHour, toLinearHour, getMonthLength, getConstellation, getSnowLevel, getCloudLevel, getSpWeatherLevel, getFogLevel, checkWaterFog, __wbg_rainbowinfo_free, __wbg_get_rainbowinfo_count, __wbg_set_rainbowinfo_count, __wbg_get_rainbowinfo_hour, __wbg_set_rainbowinfo_hour, getRainbowInfo, isAuroraPattern, getPattern, isPatternPossibleAtDate, getWeather, isHeavyShowerPattern, isLightShowerPattern, __wbg_specialcloudinfo_free, __wbg_get_specialcloudinfo_cloud, __wbg_set_specialcloudinfo_cloud, __wbg_get_specialcloudinfo_range_start, __wbg_set_specialcloudinfo_range_start, __wbg_get_specialcloudinfo_range_end, __wbg_set_specialcloudinfo_range_end, getSpecialCloudInfo, getWindPower, getWindPowerMin, getWindPowerMax, canHaveShootingStars, queryStars, getStarSecond, __wbg_guessdata_free, guessdata_new, guessdata_addPattern, guessdata_addSpecialCloudInfo, guessdata_addMinute, guessdata_addSecond, guessdata_addRainbow, guessdata_check, __wbg_guesser_free, guesser_new, guesser_work, guesser_getPercentage, guesser_getResultCount, guesser_getResult */function(module,exports,__webpack_require__){eval('"use strict";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != "__webpack_init__") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./index_bg.js */ "./pkg/index_bg.js");\n\n\n// exec wasm module\nwasmExports["__webpack_init__"]()\n\n//# sourceURL=webpack:///./pkg/index_bg.wasm?')}};